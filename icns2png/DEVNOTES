===============================================================================
Developers notes for libicns 0.0.9 - February 15th, 2008
Copyright (C) 2001-2008 Mathew Eis <mathew@eisbox.net>

===============================================================================
Section I:  (For those wishing to use libicns)
  Structures
  Functions
  Example
Section II: (For those wishing to contribute to libicns)
  Naming Conventions
  Endianness issues
  icns data format
===============================================================================
Section I
===============================================================================
Structures
typedef struct icns_element_t
typedef struct icns_family_t
typedef struct icns_image_t
Note about the data in icns_image_t - if the bit-depth is less than 8 bits, the
data will be a squashed stream. i.e. for 1 bit data, one byte is actually 8
pixels, that is, 11111111, for 4 bit data, one byte is two pixels, 0xF 0xF
In 32-bit data, the data stream is in ARGB order by default
In addition, the 4 and 8 byte images are encoded using the palettes found in
the file colormaps.h
See icns.h for more information
===============================================================================
Functions

-------------------------------------------------------------------------------
icns_get_image32_from_element
- Retreives an icon image from an icns element. Data is returned by
- reference in an icns image object with 32-bit raw, decoded, uncompressed data

-------------------------------------------------------------------------------
icns_get_image_from_element
- Retreives an icon image from an icns element. Data is returned by
- reference in an icns image object with raw, decoded, uncompressed data

-------------------------------------------------------------------------------
icns_decode_rle24_data
- Decodes rgb run-length-encoded data into a 24-bit rgb data stream (stored in
  32-bit argb format, the alpha is simply ignored.

-------------------------------------------------------------------------------
icns_new_element_from_image
- Creates an icns element structure from an icns image

-------------------------------------------------------------------------------
icns_get_element_from_family
- Retreives an icns element of the requested type from an icns family

-------------------------------------------------------------------------------
icns_set_element_in_family
- Adds/updates an icns element of it's type in an icns family

-------------------------------------------------------------------------------
icns_remove_element_in_family
- Removes an icns element of the requested type from an icns family

-------------------------------------------------------------------------------
icns_create_family
- Creates a new icns family

-------------------------------------------------------------------------------
icns_family_from_file_data
- Retreives an icns family from a file. Note that if the file is in raw icns
- format, this essentially means copying the file data to a location in
- memory. Many icns files, however, are stored as rsrc files, do more decoding
- is usually necessary

-------------------------------------------------------------------------------
icns_family_from_mac_resource
- Primarily for internal use. Parses a Macintosh rsrc data set and retrieves
- the first 'icns' resource found. Note that it is technically possible for
- there to be more than one resource of type 'icns'.

-------------------------------------------------------------------------------
icns_parse_macbinary_resource_fork
- Again primarily for internal use. Parses MacBinary data into Macintosh
- rsrc data. Some icns files are stored within macbinary encoded rsrc files
See icns.h for reference on the actual parameters used in these functions.




===============================================================================
Naming conventions

Where possible, the naming conventions are to be similar in scope to the
libpng library. libpng has been around for a long time, it's naming conventions
are mature, and developers are well aquanted with them.

===============================================================================
Endianness issues

The 'icns' icon family type has been in existence since the Mac 68k. The data
stored within the files is, therefore, big-endian native. From experience, it
seems unclear whether we are guaranteed this to be the case.
There are currently two algorithms in place to handle and detect endianess:
1) We check the file header, which ought to be 'icns'. If the header is
   found to contain the bytes 'snci', we assume we need to swap bytes.
2) We use a run-time check against known constants to determine the
   endianess of the current system. The result of the routines are used
   to parse the MacBinary format.
The current definitive documentation on the issue seems to be found in the
Apple Developer Connection document "Guidelines for Swapping Bytes" from
"Universal Binary Programming Guidelines Second Edition" - see as follows:
-------------------------------------------------------------------------------
Be aware of which functions return big-endian data, and use them appropriately.
These include the BSD Sockets networking functions, the DNSServiceDiscovery
functions (for example, TCP and UDP ports are specified in network byte order),
and the ColorSync profile functions (for which all data is big-endian). The
IconFamilyElement and IconFamilyResource data types (which also include the
data types IconFamilyPtr and IconFamilyHandle) are always big-endian. There
may be other functions and data types that are not listed here. Consult the
appropriate API reference for information on data returned by a function. For
more information see 
Network-Related Data.
-------------------------------------------------------------------------------
Source: http://developer.apple.com/documentation/MacOSX/Conceptual/
universal_binary/universal_binary_byte_swap/chapter_4_section_3.html

===============================================================================
icns data format is basically an 8-byte header, followed by icns elements
---- 8 byte header ----
+4 byte type id, always 'icns'
+4 byte int - total size of icns data: equal to total icns size
---- icns_element objects ----
|---- 8 byte header ----
|+ 4 byte type id 'ICN#', 'icl8', etc...
|+ 4 byte int - total size of element data: equal to size of element
|==== raw, rle, or jp2 image data
|---- 8 byte header ----
|+ 4 byte type id 'ICN#', 'icl8', etc...
|+ 4 byte int - total size of image data: equal to size of element
|==== raw, rle, or jp2 image data
|EOF

