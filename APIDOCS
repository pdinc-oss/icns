===============================================================================
Part I: Tutorial / Example

-------------------------------------------------------------------------------
A quick import of a 128x128 icon with mask from 'test.icns'

-------------------------------------------------------------------------------
#include <stdio.h>

#include "icns.h"

int main(void)
{
	int		error = 0;
	FILE            *inFile = NULL;
	icns_family_t	*iconFamily = NULL;
	icns_image_t	iconImage;
	
	inFile = fopen( "test.icns", "r" );
	
	if ( inFile == NULL ) {
		fprintf(stderr,"Unable to open test.icns!\n");
		goto cleanup;
	}
	
	error = icns_read_family_from_file(inFile,&iconFamily);
		
	fclose(inFile);
		
	if(error) {
		fprintf(stderr,"Unable to read icns family from file!\n");
	} else {
		error = icns_get_image32_with_mask_from_family(iconFamily,ICNS_128X128_32BIT_DATA,&iconImage);
		
		if(error) {
			fprintf(stderr,"Unable to get 128x128 image icon family!\n");
		} else {
			printf("width: %d\n",image->imageWidth);
			printf("height: %d\n",image->imageHeight);
			printf("image channels: %d\n",image->imageChannels);
			printf("image pixel depth: %d\n",image->imagePixelDepth);
			printf("image data size: %ul\n",image->imageDataSize);
		}
		
		icns_image_free(&iconImage);
	}
	
	if(iconFamily != NULL) {
		free(iconFamily);
		iconFamily = NULL;
	}
	
	return error;
}

===============================================================================
Part II: Data types and constants

-------------------------------------------------------------------------------
Preprocessor constants:

To enable debugging messages
#define	ICNS_DEBUG

To enable openjpeg support for 256x256 and 512x512 icons
#define	ICNS_OPENJPEG

-------------------------------------------------------------------------------
Basic Data Types:

typedef uint8_t         icns_bool_t;
typedef uint8_t         icns_uint8_t;
typedef int8_t          icns_sint8_t;
typedef uint16_t        icns_uint16_t;
typedef int16_t         icns_sint16_t;
typedef uint32_t        icns_uint32_t;
typedef int32_t         icns_sint32_t;
typedef uint64_t        icns_uint64_t;
typedef int64_t         icns_sint64_t;
typedef uint8_t         icns_byte_t;

-------------------------------------------------------------------------------
Data Header Data Types:
typedef struct icns_type_t {
  int8_t                c[4];
} icns_type_t;
typedef int32_t         icns_size_t;

-------------------------------------------------------------------------------
Icon Family and Element Data Types:
typedef struct icns_element_t {
  icns_type_t           elementType;    /* 'ICN#', 'icl8', etc... */
  icns_size_t           elementSize;    /* Total size of element  */
  icns_byte_t           elementData[1]; /* icon image data */
} icns_element_t;

typedef struct icns_family_t {
  icns_type_t           resourceType;	/* Always should be 'icns' */
  icns_size_t           resourceSize;	/* Total size of resource  */
  icns_element_t        elements[1];    /* icon elements */
} icns_family_t;

-------------------------------------------------------------------------------
Icon Image Data Type:
typedef struct icns_image_t
{
  icns_uint32_t         imageWidth;     // width of image in pixels
  icns_uint32_t         imageHeight;    // height of image in pixels
  icns_uint8_t          imageChannels;  // number of channels in data
  icns_uint16_t         imagePixelDepth;// number of bits-per-pixel
  icns_uint64_t         imageDataSize;  // bytes = width * height * depth / bits-per-pixel
  icns_byte_t           *imageData;     // pointer to base address of uncompressed raw image data
} icns_image_t;

-------------------------------------------------------------------------------
Icon Type Constants:
static const icns_type_t  ICNS_512x512_32BIT_ARGB_DATA   = {{'i','c','0','9'}};
static const icns_type_t  ICNS_256x256_32BIT_ARGB_DATA   = {{'i','c','0','8'}};
static const icns_type_t  ICNS_128X128_32BIT_DATA        = {{'i','t','3','2'}};
static const icns_type_t  ICNS_128X128_8BIT_MASK         = {{'t','8','m','k'}};
static const icns_type_t  ICNS_48x48_1BIT_DATA           = {{'i','c','h','#'}};
static const icns_type_t  ICNS_48x48_4BIT_DATA           = {{'i','c','h','4'}};
static const icns_type_t  ICNS_48x48_8BIT_DATA           = {{'i','c','h','8'}};
static const icns_type_t  ICNS_48x48_32BIT_DATA          = {{'i','h','3','2'}};
static const icns_type_t  ICNS_48x48_1BIT_MASK           = {{'i','c','h','#'}};
static const icns_type_t  ICNS_48x48_8BIT_MASK           = {{'h','8','m','k'}};
static const icns_type_t  ICNS_32x32_1BIT_DATA           = {{'I','C','N','#'}};
static const icns_type_t  ICNS_32x32_4BIT_DATA           = {{'i','c','l','4'}};
static const icns_type_t  ICNS_32x32_8BIT_DATA           = {{'i','c','l','8'}};
static const icns_type_t  ICNS_32x32_32BIT_DATA          = {{'i','l','3','2'}};
static const icns_type_t  ICNS_32x32_1BIT_MASK           = {{'I','C','N','#'}};
static const icns_type_t  ICNS_32x32_8BIT_MASK           = {{'l','8','m','k'}};
static const icns_type_t  ICNS_16x16_1BIT_DATA           = {{'i','c','s','#'}};
static const icns_type_t  ICNS_16x16_4BIT_DATA           = {{'i','c','s','4'}};
static const icns_type_t  ICNS_16x16_8BIT_DATA           = {{'i','c','s','8'}};
static const icns_type_t  ICNS_16x16_32BIT_DATA          = {{'i','s','3','2'}};
static const icns_type_t  ICNS_16x16_1BIT_MASK           = {{'i','c','s','#'}};
static const icns_type_t  ICNS_16x16_8BIT_MASK           = {{'s','8','m','k'}};
static const icns_type_t  ICNS_16x12_1BIT_DATA           = {{'i','c','m','#'}};
static const icns_type_t  ICNS_16x12_4BIT_DATA           = {{'i','c','m','4'}};
static const icns_type_t  ICNS_16x12_1BIT_MASK           = {{'i','c','m','#'}};
static const icns_type_t  ICNS_16x12_8BIT_DATA           = {{'i','c','m','8'}};
static const icns_type_t  ICNS_32x32_1BIT_ICON           = {{'I','C','O','N'}};
static const icns_type_t  ICNS_NULL_DATA                 = {{ 0 , 0 , 0 , 0 }};
static const icns_type_t  ICNS_NULL_MASK                 = {{ 0 , 0 , 0 , 0 }};

-------------------------------------------------------------------------------
File/Resource Type Constants:
static const icns_type_t  ICNS_FAMILY_TYPE               = {{'i','c','n','s'}};
static const icns_type_t  ICNS_MACBINARY_TYPE            = {{'m','B','I','N'}};
static const icns_type_t  ICNS_NULL_TYPE                 = {{ 0 , 0 , 0 , 0 }};

-------------------------------------------------------------------------------
Error return codes:

#define	ICNS_STATUS_OK                     0

#define	ICNS_STATUS_NULL_PARAM            -1
#define	ICNS_STATUS_NO_MEMORY             -2
#define	ICNS_STATUS_INVALID_DATA          -3

#define	ICNS_STATUS_IO_READ_ERR		   1
#define	ICNS_STATUS_IO_WRITE_ERR	   2
#define	ICNS_STATUS_DATA_NOT_FOUND         3
#define	ICNS_STATUS_UNSUPPORTED            4

===============================================================================
Part III: Manipulating the icon family

-------------------------------------------------------------------------------
Reading and writing to files
int icns_write_family_to_file(FILE *dataFile,icns_family_t *iconFamilyIn);
int icns_read_family_from_file(FILE *dataFile,icns_family_t **iconFamilyOut);

-------------------------------------------------------------------------------
Reading and writing to memory
int icns_export_family_data(icns_family_t *iconFamily,icns_uint32_t *dataSizeOut,unsigned char **dataPtrOut);
int icns_import_family_data(icns_uint32_t dataSize,unsigned char *data,icns_family_t **iconFamilyOut);

-------------------------------------------------------------------------------
Creating an new icon family
int icns_create_family(icns_family_t **iconFamilyOut);

===============================================================================
Part IV: Manipulating elements of the icon family

-------------------------------------------------------------------------------
Getting and setting elements of the icon family
int icns_get_element_from_family(icns_family_t *iconFamily,icns_type_t iconType,icns_element_t **iconElementOut);
int icns_set_element_in_family(icns_family_t **iconFamilyRef,icns_element_t *newIconElement);

-------------------------------------------------------------------------------
Adding and removing new elements of the icon family
int icns_remove_element_in_family(icns_family_t **iconFamilyRef,icns_type_t iconType);
int icns_add_element_in_family(icns_family_t **iconFamilyRef,icns_element_t *newIconElement);

-------------------------------------------------------------------------------
Creating new elements from image data
int icns_new_element_from_icon_image(icns_image_t *imageIn,icns_type_t iconType,icns_element_t **iconElementOut);
int icns_new_element_from_mask_image(icns_image_t *imageIn,icns_type_t iconType,icns_element_t **iconElementOut);

===============================================================================
Part V: Manipulating images of the icon family and icon elements

-------------------------------------------------------------------------------
Fast retrival of a complete icon image from an icon family
int icns_get_image32_with_mask_from_family(icns_family_t *iconFamily,icns_type_t sourceType,icns_image_t *imageOut);

-------------------------------------------------------------------------------
Retriving a image or mask from an icon element
int icns_get_image_from_element(icns_element_t *iconElement,icns_image_t *imageOut);
int icns_get_mask_from_element(icns_element_t *iconElement,icns_image_t *imageOut);

-------------------------------------------------------------------------------
Initializing an empty image - ready for data
int icns_init_image_for_type(icns_type_t iconType,icns_image_t *imageOut);
int icns_init_image(unsigned int iconWidth,unsigned int iconHeight,unsigned int iconChannels,unsigned int iconPixelDepth,icns_image_t *imageOut);

-------------------------------------------------------------------------------
Freeing the memory allocated by an icon image
int icns_free_image(icns_image_t *imageIn);

===============================================================================
Part VI: Decoding and encoding image data for certian formats

-------------------------------------------------------------------------------
Decoding and encoding 3 channel RLE data
int icns_decode_rle24_data(icns_uint32_t dataSizeIn, icns_sint32_t *dataPtrIn,icns_uint32_t *dataSizeOut, icns_sint32_t **dataPtrOut);
int icns_encode_rle24_data(icns_uint32_t dataSizeIn, icns_sint32_t *dataPtrIn,icns_uint32_t *dataSizeOut, icns_sint32_t **dataPtrOut);

-------------------------------------------------------------------------------
Decoding and encoding jpeg2000 image data
int icns_jp2_to_image(icns_size_t dataSize, icns_byte_t *dataPtr, icns_image_t **imageOut);
int icns_image_to_jp2(icns_image_t *image, icns_size_t *dataSizeOut, icns_byte_t **dataPtrOut);

===============================================================================
Part VII: Misc utility functions

-------------------------------------------------------------------------------
Finding the correct mask type with an icon type
icns_type_t icns_get_mask_type_for_icon_type(icns_type_t);

-------------------------------------------------------------------------------
To enable or disable the printing of error messages during runtime
void icns_set_print_errors(icns_bool_t shouldPrint);
